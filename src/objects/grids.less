.set-grids() when (@use-grids = false) {}
.set-grids() when (@use-grids = true) {



/**
 * Grid wrapper
 */
.grid,
.grid--compact,
.grid--slim,
.grid--thick {
  /**
   * Negative margin to negate the padding on the first grid child.
   */
  margin-left:-@base-spacing-unit;
  list-style:none;
  margin-bottom:0;
  font-size: 0;
  &:extend(.cf all);
}


/**
 * Grid
 */
.grid__item {
  display:inline-block;
  width:100%;
  padding-left:@base-spacing-unit;
  vertical-align:top;
  box-sizing: border-box;
  .font-size(@base-font-size);
}


/**
 * Slim grid with half base-spacing-unit between columns
 */
.grid--slim {

  margin-left: -@base-spacing-unit--small;

  > .grid__item {
    padding-left: @base-spacing-unit--small;
  }

}


/**
 * Thick grid with double base-spacing-unit between columns
 */
.grid--thick {

  margin-left: -@base-spacing-unit--large;

  > .grid__item {
    padding-left: @base-spacing-unit--large;
  }

}


/**
 * Compact grid with no margin between columns
 */
.grid--compact {

  margin-left: 0;

  > .grid__item {
    padding-left: 0;
  }

}

} // use-grids=true mixin

.set-grids();
