.set-grids() when (@use-grids = false) {}
.set-grids() when (@use-grids = true) {

/*------------------------------------*\
    $GRIDS
\*------------------------------------*/
/**
 * Fluid and nestable grid system, e.g.:
 *
   <div class="grid">

       <div class="grid__item  one-third">
           <p>One third grid</p>
       </div><!--

    --><div class="grid__item  two-thirds">
           <p>Two thirds grid</p>
       </div><!--

    --><div class="grid__item  one-half">
           <p>One half grid</p>
       </div><!--

    --><div class="grid__item  one-quarter">
           <p>One quarter grid</p>
       </div><!--

    --><div class="grid__item  one-quarter">
           <p>One quarter grid</p>
       </div>

   </div>
 *
 * Demo: jsfiddle.net/inuitcss/CLYUC
 *
 */


/**
 * Grid wrapper
 */
.grid,
.grid--compact {
    /**
     * Negative margin to negate the padding on the first grid child.
     */
    margin-left:-1*(@base-spacing-unit)*1px;
    list-style:none;
    margin-bottom:0;
    font-size: 0;
    &:extend(.cf all);
}


    /**
     * Very infrequently occuring grid wrappers as children of grid wrappers.
     */
    .grid > .grid,
    .grid--compact > .grid {
        margin-left:0;
    }


    /**
     * Grid
     */
    .grid__item {
        display:inline-block;
        width:100%;
        padding-left:@base-spacing-unit*1px;
        vertical-align:top;
        .do-selective-border-box(@global-border-box);
        .font-size(@base-font-size);
    }

/**
 * Slim grid with half base-spacing-unit between columns
 */
.grid--slim {

  margin-left: @half-spacing-unit * -1px;

  > .grid__item {
    padding-left:@half-spacing-unit * 1px;
  }

}


/**
 * Compact grid with no margin between columns
 */
.grid--compact {

  margin-left: 0;

  > .grid__item {
    padding-left: 0;
  }

}

} // use-grids=true mixin

.set-grids();
