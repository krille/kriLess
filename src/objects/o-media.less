/*------------------------------------*\
	#SETTINGS
\*------------------------------------*/
@media-gutter:                @base-spacing-unit;
@media-gutter--tiny:          round(@media-gutter / 4);
@media-gutter--small:         round(@media-gutter / 2);
@media-gutter--large:         round(@media-gutter * 2);
@media-gutter--huge:          round(@media-gutter * 4);

@enable-media--tiny:          false;
@enable-media--small:         false;
@enable-media--large:         false;
@enable-media--huge:          false;
@enable-media--rev:           false;
@enable-media--flush:         false;
@enable-media--responsive:    false;
@media-collapse-at:           720px;



& when (@use-media = true) {

	/*------------------------------------*\
		#MEDIA
	\*------------------------------------*/

	/**
	 * Place any image- and text-like content side-by-side, as per:
	 * stubbornella.org/content/2010/06/25/the-media-object-saves-hundreds-of-lines-of-code
	 */

	.o-media {
		&:extend(.u-cf all);
		display: block;
	}

		.o-media__img {
			float: left;
			margin-right: @media-gutter;

			> img {
				display: block;
			}

		}

		.o-media__body {
			overflow: hidden;
			display: block;

			&,
			> :last-child {
				margin-bottom: 0;
			}

		}





	/**
	 * Tiny media objects.
	 */
	& when (@enable-media--tiny = true) {

		.o-media--tiny {

			> .o-media__img {
				margin-right: @media-gutter--tiny;
			}

			/**
			 * Tiny reversed media objects.
			 */
			& when (@enable-media--rev = true) {

				&.o-media--rev {

					> .o-media__img {
						margin-right: 0;
						margin-left:  @media-gutter--tiny;
					}

				}

			}

		}

	}





	/**
	 * Small media objects.
	 */
	& when (@enable-media--small = true) {

		.o-media--small {

			> .o-media__img {
				margin-right: @media-gutter--small;
			}

			/**
			 * Small reversed media objects.
			 */
			& when (@enable-media--rev = true) {

				&.o-media--rev {

					> .o-media__img {
						margin-right: 0;
						margin-left:  @media-gutter--small;
					}

				}

			}

		}

	}





	/**
	 * Large media objects.
	 */
	& when (@enable-media--large = true) {

		.o-media--large {

			> .o-media__img {
				margin-right: @media-gutter--large;
			}

			/**
			 * Large reversed media objects.
			 */
			& when (@enable-media--rev = true) {

				&.o-media--rev {

					> .o-media__img {
						margin-right: 0;
						margin-left:  @media-gutter--large;
					}

				}

			}

		}

	}




	/**
	 * Huge media objects.
	 */
	& when (@enable-media--huge = true) {

		.o-media--huge {

			> .o-media__img {
				margin-right: @media-gutter--huge;
			}

			/**
			 * Huge reversed media objects.
			 */
			& when (@enable-media--rev = true) {

				&.o-media--rev {

					> .o-media__img {
						margin-right: 0;
						margin-left:  @media-gutter--huge;
					}

				}

			}

		}

	}





	/**
	 * Reversed image location (right instead of left). Extends `.media`.
	 */
	& when (@enable-media--rev = true) {

		.o-media--rev {

			> .o-media__img {
				float: right;
				margin-right: 0;
				margin-left: @media-gutter;
			}

		}

	}





	/**
	 * Flush media objects have no space between the image- and text-content.
	 */
	& when (@enable-media--flush = true) {

		.o-media--flush {

			> .o-media__img {
				margin-right: 0;
				margin-left:  0;
			}

		}

	}





	/**
	 * Responsive media objects.
	 *
	 * There is a very pragmatic, simple implementation of a responsive media
	 * object, which simply places the text-content beneath the image-content.
	 *
	 * We use a `max-width` media query because:
	 *
	 * a) it is the least verbose method in terms of amount of code required.
	 * b) the media objectâ€™s default state is image-next-to-text, so its stacked
	 *    state is the exception, rather than the rule.
	 */
	& when (@enable-media--responsive = true) {

		@media screen and (max-width: @media-collapse-at) {

			.o-media--responsive {

				/**
				 * Rework the spacings on regular media objects.
				 */
				> .o-media__img {
					float: none;
					margin-right: 0;
					margin-bottom: @media-gutter;
					margin-left:  0;
				}

				/**
				 * Tiny responsive media objects.
				 *
				 * Take a little more heavy-handed approach to reworking
				 * spacings on media objects that are also tiny media objects
				 * in their regular state.
				 */
				& when (@enable-media--tiny = true) {

					&.o-media--tiny {

						> .o-media__img {
							margin-right: 0;
							margin-left:  0;
							margin-bottom: @media-gutter--tiny;
						}

					}

				}

				/**
				 * Small responsive media objects.
				 *
				 * Take a little more heavy-handed approach to reworking
				 * spacings on media objects that are also small media objects
				 * in their regular state.
				 */
				& when (@enable-media--small = true) {

					&.o-media--small {

						> .o-media__img {
							margin-right: 0;
							margin-left:  0;
							margin-bottom: @media-gutter--small;
						}

					}

				}

				/**
				 * Large responsive media objects.
				 *
				 * Take a little more heavy-handed approach to reworking
				 * spacings on media objects that are also large media objects
				 * in their regular state.
				 */
				& when (@enable-media--large = true) {

					&.o-media--large {

						> .o-media__img {
							margin-right: 0;
							margin-left:  0;
							margin-bottom: @media-gutter--large;
						}

					}

				}

				/**
				 * Huge responsive media objects.
				 *
				 * Take a little more heavy-handed approach to reworking
				 * spacings on media objects that are also huge media objects
				 * in their regular state.
				 */
				& when (@enable-media--huge = true) {

					&.o-media--huge {

						> .o-media__img {
							margin-right: 0;
							margin-left:  0;
							margin-bottom: @media-gutter--huge;
						}

					}

				}

			}

		}

	}



}
