/*------------------------------------*\
	#SETTINGS
\*------------------------------------*/
@box-padding:         @base-spacing-unit;
@box-padding--tiny:   round(@box-padding / 4);
@box-padding--small:  round(@box-padding / 2);
@box-padding--large:  round(@box-padding * 2);
@box-padding--huge:   round(@box-padding * 4);

@enable-box--flush:   false;
@enable-box--tiny:    false;
@enable-box--small:   false;
@enable-box--large:   false;
@enable-box--huge:    false;



& when (@use-box = true) {

	/*------------------------------------*\
		#BOX
	\*------------------------------------*/

	/**
	 * The box object simply boxes off content.
	 */

	/**
	 * 1. So we can apply the `.box` class to naturally-inline elements.
	 */
	.o-box {

		&:extend(.u-cf all);
		display: block; /* [1] */
		padding: @box-padding;

		> :last-child {
			margin-bottom: 0;
		}

	}





	/**
	 * Flush (i.e. no padding) box.
	 */
	& when (@enable-box--flush = true) {

		.o-box--flush {
			padding: 0;
		}

	}





	/**
	 * Tiny box.
	 */
	& when (@enable-box--tiny = true) {

		.o-box--tiny {
			padding: @box-padding--tiny;
		}

	}





	/**
	 * Small box.
	 */
	& when (@enable-box--small = true) {

		.o-box--small {
			padding: @box-padding--small;
		}

	}





	/**
	 * Large box.
	 */
	& when (@enable-box--large = true) {

		.o-box--large {
			padding: @box-padding--large;
		}

	}





	/**
	 * Huge box.
	 */
	& when (@enable-box--huge = true) {

		.o-box--huge {
			padding: @box-padding--huge;
		}

	}



}
