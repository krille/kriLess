/*------------------------------------*\
	#SPACING-RESPONSIVE
\*------------------------------------*/

/**
 * Margin and padding helper classes. Use these to tweak layout on a micro
 * level.
 *
 * `.(m|p)(t|r|b|l|h|v)(-|+|0) {}` = margin/padding top/right/bottom/left/horizontal/vertical less/more/none
 */

@enable-responsive-margins:                   false;
@enable-responsive-margins--tiny:             false;
@enable-responsive-margins--small:            false;
@enable-responsive-margins--large:            false;
@enable-responsive-margins--huge:             false;

@enable-responsive-margins--negative:         false;
@enable-responsive-margins--negative-tiny:    false;
@enable-responsive-margins--negative-small:   false;
@enable-responsive-margins--negative-large:   false;
@enable-responsive-margins--negative-huge:    false;

@enable-responsive-margins--none:             false;

@enable-responsive-paddings:                  false;
@enable-responsive-paddings--tiny:            false;
@enable-responsive-paddings--small:           false;
@enable-responsive-paddings--large:           false;
@enable-responsive-paddings--huge:            false;

@enable-responsive-paddings--none:            false;



& when (@responsive-spacing = true) {

	// Loop through the list of breakpoints weâ€™ve provided in our settings file.
	.loop-breakpoints(@breakpoints) {

		.loop(@i) when (@i > 0) {
			
			.loop((@i - 1));

			@alias: extract(extract(@breakpoints, @i), 1);
			@condition: extract(extract(@breakpoints, @i), 2);

			& when (isstring(@alias)) and (isstring(@condition)) {

				@unquotedCondition: e(@condition);
				@unquotedAlias: e(@alias);

				// Setup spacing
				@media @unquotedCondition {

					& when (@enable-responsive-margins = true) {
						.enable-margins(@unquotedAlias) !important;
					}

					& when (@enable-responsive-margins--tiny = true) {
						.enable-margins--tiny(@unquotedAlias) !important;
					}

					& when (@enable-responsive-margins--small = true) {
						.enable-margins--small(@unquotedAlias) !important;
					}

					& when (@enable-responsive-margins--large = true) {
						.enable-margins--large(@unquotedAlias) !important;
					}

					& when (@enable-responsive-margins--huge = true) {
						.enable-margins--huge(@unquotedAlias) !important;
					}

					& when (@enable-responsive-margins--none = true) {
						.enable-margins--none(@unquotedAlias) !important;
					}

					& when (@enable-responsive-margins--negative = true) {
						.enable-margins--negative(@unquotedAlias) !important;
					}

					& when (@enable-responsive-margins--negative-tiny = true) {
						.enable-margins--negative-tiny(@unquotedAlias) !important;
					}

					& when (@enable-responsive-margins--negative-small = true) {
						.enable-margins--negative-small(@unquotedAlias) !important;
					}

					& when (@enable-responsive-margins--negative-large = true) {
						.enable-margins--negative-large(@unquotedAlias) !important;
					}

					& when (@enable-responsive-margins--negative-huge = true) {
						.enable-margins--negative-huge(@unquotedAlias) !important;
					}

					& when (@enable-responsive-paddings = true) {
						.enable-paddings(@unquotedAlias) !important;
					}

					& when (@enable-responsive-paddings--tiny = true) {
						.enable-paddings--tiny(@unquotedAlias) !important;
					}

					& when (@enable-responsive-paddings--small = true) {
						.enable-paddings--small(@unquotedAlias) !important;
					}

					& when (@enable-responsive-paddings--large = true) {
						.enable-paddings--large(@unquotedAlias) !important;
					}

					& when (@enable-responsive-paddings--huge = true) {
						.enable-paddings--huge(@unquotedAlias) !important;
					}

					& when (@enable-responsive-paddings--none = true) {
						.enable-paddings--none(@unquotedAlias) !important;
					}
				}

			}

		}

		.loop(length(@breakpoints));

	}

	.loop-breakpoints(@breakpoints);

}