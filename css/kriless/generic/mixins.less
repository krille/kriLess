/*------------------------------------*\
    $MIXINS
\*------------------------------------*/
/**
 * Create a fully formed type style (sizing and vertical rhythm) by passing in a
 * single value, e.g.:
 *
   `@include font-size(10px);`
 *
 * Thanks to @redclov3r for the `line-height` Sass:
 * twitter.com/redclov3r/status/250301539321798657
 */
.font-size(@font-size){
    font-size:@font-size*1px;
    font-size:(@font-size/@base-font-size)*1rem;
}

.font-size(@font-size, true){
    font-size:@font-size*1px;
    font-size:(@font-size/@base-font-size)*1rem;
    line-height:ceil(@font-size/@base-line-height)*(@base-line-height/@font-size);
}



/**
 * Create vendor-prefixed CSS in one go, e.g.
 *
   `.box-sizing(border-box);`
 *
 */
.box-sizing(@value){
    -webkit-box-sizing:@value;
       -moz-box-sizing:@value;
        -ms-box-sizing:@value;
         -o-box-sizing:@value;
            box-sizing:@value;
}



/**
 * Force overly long spans of text to truncate, e.g.:
 *
   `@include truncate(100%);`
 *
 * Where `@truncation-boundary` is a united measurement.
 */
.truncate(@truncation-boundary){
    max-width:@truncation-boundary;
    white-space:nowrap;
    overflow:hidden;
    text-overflow:ellipsis;
}



/**
 * CSS image replacement
 *
 * Source: https://github.com/h5bp/html5-boilerplate/commit/aa0396eae757
 *
 */
.hide-text() {
  font: 0/0 a;
  color: transparent;
  text-shadow: none;
  background-color: transparent;
  border: 0;
}



/**
 * Placeholdertext
 *
 */
.placeholder(@color: @base-ui-color) {
  &::-webkit-input-placeholder {
    color: @color;
  }
  &:-moz-placeholder {
    color: @color;
    opacity: 1;
  }
  &::-moz-placeholder {
    color: @color;
    opacity: 1;
  }
  &:-ms-input-placeholder {
    color: @color !important;
  }
}



/**
 * User-select
 *
 */
.user-select(@select) {
  -webkit-user-select: @select;
     -moz-user-select: @select;
      -ms-user-select: @select;
       -o-user-select: @select;
          user-select: @select;
}



/**
 * Opacity
 *
 */
.opacity(@opacity) {
  opacity: @opacity / 100;
  filter: ~"alpha(opacity=@{opacity})";
}



/**
 * IE7 Inline-block
 *
 */
.ie7-inline-block() {
  *display: inline;
  *zoom: 1;
}



/**
 * Create global or selective box sizing rules based on the value passed
 *
 */
.do-global-border-box(@conditional) when (@conditional = true) {
    /**
     * Letâ€™s make the box model all nice, shall we...?
     */
    *,
    *:before,
    *:after{
       .box-sizing(border-box);
    }
}
.do-global-border-box(@conditional) when (@conditional = false) {
}
.do-selective-border-box(@conditional) when (@conditional = false) {
   .box-sizing(border-box);
}
.do-selective-border-box(@conditional) when (@conditional = true) {
}


.set-transitions() when (@use-transitions = false) {}
.set-transitions() when (@use-transitions = true) {

// Transitions
.transition(@transition) {
  -webkit-transition: @transition;
     -moz-transition: @transition;
       -o-transition: @transition;
          transition: @transition;
}
.transition-delay(@transition-delay) {
  -webkit-transition-delay: @transition-delay;
     -moz-transition-delay: @transition-delay;
       -o-transition-delay: @transition-delay;
          transition-delay: @transition-delay;
}
.transition-duration(@transition-duration) {
  -webkit-transition-duration: @transition-duration;
     -moz-transition-duration: @transition-duration;
       -o-transition-duration: @transition-duration;
          transition-duration: @transition-duration;
}

// Transformations
.rotate(@degrees) {
  -webkit-transform: rotate(@degrees);
     -moz-transform: rotate(@degrees);
      -ms-transform: rotate(@degrees);
       -o-transform: rotate(@degrees);
          transform: rotate(@degrees);
}
.scale(@ratio) {
  -webkit-transform: scale(@ratio);
     -moz-transform: scale(@ratio);
      -ms-transform: scale(@ratio);
       -o-transform: scale(@ratio);
          transform: scale(@ratio);
}
.translate(@x, @y) {
  -webkit-transform: translate(@x, @y);
     -moz-transform: translate(@x, @y);
      -ms-transform: translate(@x, @y);
       -o-transform: translate(@x, @y);
          transform: translate(@x, @y);
}
.skew(@x, @y) {
  -webkit-transform: skew(@x, @y);
     -moz-transform: skew(@x, @y);
      -ms-transform: skewX(@x) skewY(@y); // See https://github.com/twitter/bootstrap/issues/4885
       -o-transform: skew(@x, @y);
          transform: skew(@x, @y);
  -webkit-backface-visibility: hidden; // See https://github.com/twitter/bootstrap/issues/5319
}
.translate3d(@x, @y, @z) {
  -webkit-transform: translate3d(@x, @y, @z);
     -moz-transform: translate3d(@x, @y, @z);
       -o-transform: translate3d(@x, @y, @z);
          transform: translate3d(@x, @y, @z);
}
.translateZ(@x) {
  -webkit-transform: translateZ(@x);
     -moz-transform: translateZ(@x);
       -o-transform: translateZ(@x);
          transform: translateZ(@x);
}

// Backface visibility
// Prevent browsers from flickering when using CSS 3D transforms.
// Default value is `visible`, but can be changed to `hidden
// See git pull https://github.com/dannykeane/bootstrap.git backface-visibility for examples
.backface-visibility(@visibility){
    -webkit-backface-visibility: @visibility;
       -moz-backface-visibility: @visibility;
            backface-visibility: @visibility;
}

// Background clipping
// Heads up: FF 3.6 and under need "padding" instead of "padding-box"
.background-clip(@clip) {
  -webkit-background-clip: @clip;
     -moz-background-clip: @clip;
          background-clip: @clip;
}

} // use-transitions=true mixin

.set-transitions();
